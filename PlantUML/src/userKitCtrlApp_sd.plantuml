@startuml userKitCtrlApp_sd

hide footbox

skinparam {
    monochrome true
    dpi 300
    padding 5
    sequenceMessageAlign center
    packageStyle frame
    shadowing false
    'backgroundColor transparent
}

mainframe **sd** userKitCtrlApp

participant main <<utility>>
participant UserKitCtrl <<controller>>
participant ComUnitIF <<boundary>>
participant Transmitter <<controller>>
participant Receiver <<controller>>

main -> UserKitCtrl++: initUserKitCtrl(userkitID : int)
deactivate UserKitCtrl
main -> ComUnitIF++: initComUnitIF(userkitID : int)
deactivate ComUnitIF

loop

    note over main : empty loop

    else Interrupt from isr_filter
    [o-> main: <<filter event>>
    activate main

    main -> main: update filterOutputVolt

    alt (filterOutputVolt > minLevelDetection || filterOutputVolt > -minLevelDetection) && currentLaserID != userkitID
        main -> ComUnitIF++: sendHitInd(currentLaserID)
        deactivate ComUnitIF
        main -> Receiver++: receiverHit()
        deactivate Receiver
        deactivate main
    end

    else Interrupt from isr_mixerFreq
    [o-> main: <<mixerFreq event>>
    activate main
    main -> Receiver++: changeMixerFrequency(currentLaserID)
    return newLaserID
    deactivate main
    deactivate Receiver

    else Interrupt from isr_trigger
    [o-> main: <<trigger event>>
    activate main
    main -> Transmitter++: startTransmitting()
    deactivate Transmitter
    deactivate main

    else Interrupt from isr_triggerBlocking
    [o-> main: <<triggerBlocking event>>
    activate main

    main -> Transmitter++: stopTransmitting()
    deactivate Transmitter
    deactivate main

end

@enduml